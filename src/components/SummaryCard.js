import React, { useState } from 'react';
import { 
  DocumentArrowDownIcon, 
  CheckCircleIcon,
  ClockIcon,
  ScaleIcon,
  DocumentTextIcon,
  PrinterIcon
} from '@heroicons/react/24/outline';

const SummaryCard = ({ summary = {}, analysisData = {}, onPDFExport = null }) => {
  // Provide default values to prevent undefined errors
  const {
    title = 'Document Summary',
    description = 'Analysis in progress...',
    keyPoints = [],
    stats = {
      totalClauses: 0,
      riskyClauses: 0,
      readingTime: '0 min'
    }
  } = summary;

  // Extract enhanced analysis data
  const {
    overallRiskLevel = 'medium',
    recommendations = [],
    missingClauses = [],
    favorability = { forParty1: 'unknown', forParty2: 'unknown', explanation: 'Analysis not available' }
  } = analysisData;

  const [isExporting, setIsExporting] = useState(false);

  const handleDownloadSummary = () => {
    const summaryText = `Document Summary\n\n${title}\n\n${keyPoints.map(point => `• ${point}`).join('\n')}\n\nGenerated by LegalEaseAI`;
    
    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'legal-document-summary.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handlePDFExport = async () => {
    if (!onPDFExport) return;
    
    setIsExporting(true);
    try {
      await onPDFExport();
    } catch (error) {
      console.error('PDF export failed:', error);
      alert('Failed to export PDF. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className="card p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-primary-100 dark:bg-primary-900 rounded-lg">
            <ScaleIcon className="h-6 w-6 text-primary-600 dark:text-primary-400" />
          </div>
          <h2 className="text-2xl font-bold text-accent-900 dark:text-accent-100">
            Document Summary
          </h2>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={handleDownloadSummary}
            className="btn-secondary flex items-center space-x-2"
          >
            <DocumentArrowDownIcon className="h-5 w-5" />
            <span>Download Summary</span>
          </button>
          
          {onPDFExport && (
            <button
              onClick={handlePDFExport}
              disabled={isExporting}
              className={`btn-primary flex items-center space-x-2 ${
                isExporting ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              {isExporting ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  <span>Generating PDF...</span>
                </>
              ) : (
                <>
                  <DocumentTextIcon className="h-5 w-5" />
                  <span>Export PDF</span>
                </>
              )}
            </button>
          )}
        </div>
      </div>

      {/* Summary Title */}
      <div className="mb-6">
        <h3 className="text-xl font-semibold text-accent-900 dark:text-accent-100 mb-2">
          {title}
        </h3>
        <p className="text-accent-600 dark:text-accent-400">
          {description}
        </p>
      </div>

      {/* Key Points */}
      <div className="space-y-4">
        <h4 className="text-lg font-medium text-accent-900 dark:text-accent-100 flex items-center space-x-2">
          <CheckCircleIcon className="h-5 w-5 text-success-500" />
          <span>Key Points</span>
        </h4>
        
        <ul className="space-y-3">
          {keyPoints.length > 0 ? (
            keyPoints.map((point, index) => (
              <li key={index} className="flex items-start space-x-3">
                <div className="flex-shrink-0 w-2 h-2 bg-primary-500 rounded-full mt-2"></div>
                <span className="text-accent-700 dark:text-accent-300">{point}</span>
              </li>
            ))
          ) : (
            <li className="text-accent-600 dark:text-accent-400 italic">No key points available yet</li>
          )}
        </ul>
      </div>

      {/* Document Stats */}
      <div className="mt-6 pt-6 border-t border-accent-200 dark:border-accent-700">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-primary-600 dark:text-primary-400">
              {stats.totalClauses}
            </div>
            <div className="text-sm text-accent-600 dark:text-accent-400">Total Clauses</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-warning-600 dark:text-warning-400">
              {stats.riskyClauses}
            </div>
            <div className="text-sm text-accent-600 dark:text-accent-400">Risk Flags</div>
          </div>
          
          <div className="text-center">
            <div className={`text-2xl font-bold ${
              overallRiskLevel === 'high' ? 'text-danger-600 dark:text-danger-400' :
              overallRiskLevel === 'medium' ? 'text-warning-600 dark:text-warning-400' :
              'text-success-600 dark:text-success-400'
            }`}>
              {overallRiskLevel.charAt(0).toUpperCase() + overallRiskLevel.slice(1)}
            </div>
            <div className="text-sm text-accent-600 dark:text-accent-400">Overall Risk</div>
          </div>
          
          <div className="text-center flex flex-col items-center">
            <div className="flex items-center space-x-1">
              <ClockIcon className="h-5 w-5 text-accent-600 dark:text-accent-400" />
              <span className="text-lg font-bold text-accent-900 dark:text-accent-100">
                {stats.readingTime}
              </span>
            </div>
            <div className="text-sm text-accent-600 dark:text-accent-400">Reading Time</div>
          </div>
        </div>
      </div>

      {/* AI Recommendations */}
      {recommendations.length > 0 && (
        <div className="mt-6 pt-6 border-t border-accent-200 dark:border-accent-700">
          <h4 className="text-lg font-medium text-accent-900 dark:text-accent-100 mb-3">
            AI Recommendations
          </h4>
          <div className="space-y-2">
            {recommendations.map((rec, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                <span className="text-accent-700 dark:text-accent-300 text-sm">{rec}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Document Favorability */}
      {favorability.explanation !== 'Analysis not available' && (
        <div className="mt-6 pt-6 border-t border-accent-200 dark:border-accent-700">
          <h4 className="text-lg font-medium text-accent-900 dark:text-accent-100 mb-3">
            Document Favorability Assessment
          </h4>
          <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800">
            <p className="text-sm text-accent-700 dark:text-accent-300 mb-3">
              {favorability.explanation}
            </p>
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-lg font-semibold text-accent-900 dark:text-accent-100">
                  Party 1: {favorability.forParty1.charAt(0).toUpperCase() + favorability.forParty1.slice(1)}
                </div>
              </div>
              <div className="text-center">
                <div className="text-lg font-semibold text-accent-900 dark:text-accent-100">
                  Party 2: {favorability.forParty2.charAt(0).toUpperCase() + favorability.forParty2.slice(1)}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Missing Clauses Alert */}
      {missingClauses.length > 0 && (
        <div className="mt-6 pt-6 border-t border-accent-200 dark:border-accent-700">
          <h4 className="text-lg font-medium text-accent-900 dark:text-accent-100 mb-3 text-warning-600 dark:text-warning-400">
            ⚠️ Missing Important Clauses
          </h4>
          <div className="space-y-2">
            {missingClauses.map((clause, index) => (
              <div key={index} className="p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800">
                <span className="text-accent-700 dark:text-accent-300 text-sm">{clause}</span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SummaryCard;